/*
 *  "parser_FIRST.java"
 *	Esta clase toma la fórmula del usuario y comprueba su sintaxis. Si es correcta resuelve los cuantificadores.
 * 	El resultado es otra cadena directamente analizable, sin cuantificadores que solo requiere comparaciones con otro
 * 	 parser similar a este (parser_SECOND)

 *
 *
 *  Copyright (C) 2005, 2006 Jose Manuel Martínez García <glasnosh@gmail.com>
 *
 *  This program is "Open Source" software; you can redistribute it and/or modify
 *   it under the terms of the GNU General Public License (explicitly version 2 
 *   of the License).
 */

/*
 *      La báse de este código ha sido contruida con "CUP v0.10k"
 *	Infinitamente agradecido a la "Princeton University" por haber creado esta maravillosa herramienta (y 
 *	 también JLex) y a la "Technical University of Munich", mantenedores y responsables de la versión que 
 * 	 se ha utilizado.
 *
 */
 
/*
 *	¿Como funciona el parseo?
 *
 *	Cup está integrado con JLex, que es el que se encarga de irle pasando los tokens (scanner)
 *	
 *	Mientras no hay error de parseo (lo saca el sistema solo si la base CUP está bien creado) se va aceptando la fórmula.
 *	Para detectar errores de parseo (sintaxis) se redefine la función "syntax_error" para marcar una variable cuando un 
 *	 error de estos aparece.
 *	
 *	La mayoría de tokens se van añadiendo a la cadena final. El problema está cuando aparece una variable (x,y,z,t) o un
 *	 nombre (a,b,...,h). Primero hay que comprobar que las variables están cuantificadas antes de aparecer y que los nombres
 *	 existen en la malla. Luego se resuelven. Se transforman en pares de coordenadas de la malla. En ese punto ya no hay nombres.
 *
 *	El otro punto importante es con la resolución de cuantificadores. Cuando tenemos una variable cuantificada, se resuelve el 
 *	 cuantificador sustituyendo la variable por todos los elementos que hay en la malla (sus pares de coordenadas) con conjunciones
 *	 o disyunciones según sea una cuantificación existencial o universal. Es necesario ver el código para entender el 
 * 	 funcionamiento.
 *	       
 */
 
 //	Glasnosh: Las lineas (al menos) que van acompañadas entre //*// han sido añadidas por mí.

//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Tue Nov 15 11:37:17 CET 2005
//----------------------------------------------------

import java_cup.runtime.*;
import java.lang.*;
import java.io.*;
import java.util.*;

/** CUP v0.10k generated parser.
  * @version Tue Nov 15 11:37:17 CET 2005
  */
public class parser_FIRST extends java_cup.runtime.lr_parser {

 
//*//
String cadena_final;
boolean error_sintaxis = false;		//si ha habido error de sintaxis o no. Este valor debe ser devuelto
boolean evaluable = true;		//si es evaluable o no. Este valor debe de ser devuelto

malla mimalla;				//la malla que es "caso de estudio"

  /** Default constructor. */
  public parser_FIRST() {super();}

  /** Constructor which sets the default scanner. */
  public parser_FIRST(java_cup.runtime.Scanner s, malla mimalla) {
  	super(s);
//*//

this.mimalla = mimalla;		
	}//constructor

  
//*//
public boolean errorSintaxis(){		
	return error_sintaxis;
}
public boolean evaluable(){
	return action_obj._evaluable();
}
public String cadena_final(){			//la cadena reconocida y con los cuantificadores resueltos
	return action_obj.cadena_resuelta();
}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\047\000\002\002\004\000\002\006\003\000\002\003" +
    "\007\000\002\003\007\000\002\003\004\000\002\003\007" +
    "\000\002\003\007\000\002\003\004\000\002\003\003\000" +
    "\002\003\005\000\002\004\006\000\002\004\006\000\002" +
    "\004\006\000\002\004\006\000\002\004\006\000\002\004" +
    "\006\000\002\004\006\000\002\004\006\000\002\004\010" +
    "\000\002\004\010\000\002\004\010\000\002\004\010\000" +
    "\002\004\010\000\002\004\010\000\002\004\010\000\002" +
    "\004\010\000\002\004\010\000\002\004\010\000\002\004" +
    "\010\000\002\004\010\000\002\004\012\000\002\004\005" +
    "\000\002\004\005\000\002\004\007\000\002\005\004\000" +
    "\002\005\004\000\002\005\004\000\002\007\003\000\002" +
    "\007\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\232\000\072\006\016\007\017\015\005\017\043\020" +
    "\022\023\025\024\033\025\013\026\027\027\024\030\036" +
    "\031\026\032\012\033\037\034\020\035\035\036\007\037" +
    "\004\040\042\041\014\042\040\043\015\044\032\045\041" +
    "\046\030\047\023\050\034\051\010\001\002\000\004\015" +
    "\230\001\002\000\076\006\016\007\017\012\047\013\050" +
    "\015\005\017\043\020\022\023\025\024\033\025\013\026" +
    "\027\027\024\030\036\031\026\032\012\033\037\034\020" +
    "\035\035\036\007\037\004\040\042\041\014\042\040\043" +
    "\015\044\032\045\041\046\030\047\023\050\034\051\010" +
    "\001\002\000\004\002\205\001\002\000\004\015\200\001" +
    "\002\000\004\015\171\001\002\000\004\002\000\001\002" +
    "\000\004\015\166\001\002\000\004\015\163\001\002\000" +
    "\004\015\156\001\002\000\004\015\151\001\002\000\072" +
    "\006\016\007\017\015\005\017\043\020\022\023\025\024" +
    "\033\025\013\026\027\027\024\030\036\031\026\032\012" +
    "\033\037\034\020\035\035\036\007\037\004\040\042\041" +
    "\014\042\040\043\015\044\032\045\041\046\030\047\023" +
    "\050\034\051\010\001\002\000\010\007\017\017\043\020" +
    "\022\001\002\000\004\015\144\001\002\000\072\006\016" +
    "\007\017\015\005\017\043\020\022\023\025\024\033\025" +
    "\013\026\027\027\024\030\036\031\026\032\012\033\037" +
    "\034\020\035\035\036\007\037\004\040\042\041\014\042" +
    "\040\043\015\044\032\045\041\046\030\047\023\050\034" +
    "\051\010\001\002\000\004\013\142\001\002\000\004\015" +
    "\135\001\002\000\004\015\132\001\002\000\004\015\130" +
    "\001\002\000\004\015\125\001\002\000\004\015\122\001" +
    "\002\000\004\015\115\001\002\000\016\002\ufff9\004\ufff9" +
    "\005\ufff9\010\ufff9\014\ufff9\016\ufff9\001\002\000\004\015" +
    "\110\001\002\000\004\015\106\001\002\000\004\015\101" +
    "\001\002\000\004\015\074\001\002\000\004\015\071\001" +
    "\002\000\004\015\066\001\002\000\004\015\061\001\002" +
    "\000\004\015\054\001\002\000\004\015\045\001\002\000" +
    "\004\013\044\001\002\000\072\006\uffdf\007\uffdf\015\uffdf" +
    "\017\uffdf\020\uffdf\023\uffdf\024\uffdf\025\uffdf\026\uffdf\027" +
    "\uffdf\030\uffdf\031\uffdf\032\uffdf\033\uffdf\034\uffdf\035\uffdf" +
    "\036\uffdf\037\uffdf\040\uffdf\041\uffdf\042\uffdf\043\uffdf\044" +
    "\uffdf\045\uffdf\046\uffdf\047\uffdf\050\uffdf\051\uffdf\001\002" +
    "\000\006\012\047\013\050\001\002\000\004\021\051\001" +
    "\002\000\010\011\uffdc\016\uffdc\021\uffdc\001\002\000\010" +
    "\011\uffdb\016\uffdb\021\uffdb\001\002\000\006\012\047\013" +
    "\050\001\002\000\004\016\053\001\002\000\016\002\uffec" +
    "\004\uffec\005\uffec\010\uffec\014\uffec\016\uffec\001\002\000" +
    "\006\012\047\013\050\001\002\000\004\021\056\001\002" +
    "\000\006\012\047\013\050\001\002\000\004\016\060\001" +
    "\002\000\016\002\uffe7\004\uffe7\005\uffe7\010\uffe7\014\uffe7" +
    "\016\uffe7\001\002\000\006\012\047\013\050\001\002\000" +
    "\004\021\063\001\002\000\006\012\047\013\050\001\002" +
    "\000\004\016\065\001\002\000\016\002\uffea\004\uffea\005" +
    "\uffea\010\uffea\014\uffea\016\uffea\001\002\000\006\012\047" +
    "\013\050\001\002\000\004\016\070\001\002\000\016\002" +
    "\ufff1\004\ufff1\005\ufff1\010\ufff1\014\ufff1\016\ufff1\001\002" +
    "\000\006\012\047\013\050\001\002\000\004\016\073\001" +
    "\002\000\016\002\ufff4\004\ufff4\005\ufff4\010\ufff4\014\ufff4" +
    "\016\ufff4\001\002\000\006\012\047\013\050\001\002\000" +
    "\004\021\076\001\002\000\006\012\047\013\050\001\002" +
    "\000\004\016\100\001\002\000\016\002\uffef\004\uffef\005" +
    "\uffef\010\uffef\014\uffef\016\uffef\001\002\000\006\012\047" +
    "\013\050\001\002\000\004\021\103\001\002\000\006\012" +
    "\047\013\050\001\002\000\004\016\105\001\002\000\016" +
    "\002\uffe4\004\uffe4\005\uffe4\010\uffe4\014\uffe4\016\uffe4\001" +
    "\002\000\004\016\107\001\002\000\016\002\uffe1\004\uffe1" +
    "\005\uffe1\010\uffe1\014\uffe1\016\uffe1\001\002\000\006\012" +
    "\047\013\050\001\002\000\004\021\112\001\002\000\006" +
    "\012\047\013\050\001\002\000\004\016\114\001\002\000" +
    "\016\002\uffe8\004\uffe8\005\uffe8\010\uffe8\014\uffe8\016\uffe8" +
    "\001\002\000\006\012\047\013\050\001\002\000\004\021" +
    "\117\001\002\000\006\012\047\013\050\001\002\000\004" +
    "\016\121\001\002\000\016\002\uffe6\004\uffe6\005\uffe6\010" +
    "\uffe6\014\uffe6\016\uffe6\001\002\000\006\012\047\013\050" +
    "\001\002\000\004\016\124\001\002\000\016\002\ufff6\004" +
    "\ufff6\005\ufff6\010\ufff6\014\ufff6\016\ufff6\001\002\000\006" +
    "\012\047\013\050\001\002\000\004\016\127\001\002\000" +
    "\016\002\ufff3\004\ufff3\005\ufff3\010\ufff3\014\ufff3\016\ufff3" +
    "\001\002\000\004\016\131\001\002\000\016\002\uffe2\004" +
    "\uffe2\005\uffe2\010\uffe2\014\uffe2\016\uffe2\001\002\000\006" +
    "\012\047\013\050\001\002\000\004\016\134\001\002\000" +
    "\016\002\ufff5\004\ufff5\005\ufff5\010\ufff5\014\ufff5\016\ufff5" +
    "\001\002\000\006\012\047\013\050\001\002\000\004\021" +
    "\137\001\002\000\006\012\047\013\050\001\002\000\004" +
    "\016\141\001\002\000\016\002\uffe5\004\uffe5\005\uffe5\010" +
    "\uffe5\014\uffe5\016\uffe5\001\002\000\072\006\uffde\007\uffde" +
    "\015\uffde\017\uffde\020\uffde\023\uffde\024\uffde\025\uffde\026" +
    "\uffde\027\uffde\030\uffde\031\uffde\032\uffde\033\uffde\034\uffde" +
    "\035\uffde\036\uffde\037\uffde\040\uffde\041\uffde\042\uffde\043" +
    "\uffde\044\uffde\045\uffde\046\uffde\047\uffde\050\uffde\051\uffde" +
    "\001\002\000\016\002\ufffa\004\ufffa\005\ufffa\010\ufffa\014" +
    "\ufffa\016\ufffa\001\002\000\006\012\047\013\050\001\002" +
    "\000\004\016\146\001\002\000\016\002\ufff0\004\ufff0\005" +
    "\ufff0\010\ufff0\014\ufff0\016\ufff0\001\002\000\072\006\uffdd" +
    "\007\uffdd\015\uffdd\017\uffdd\020\uffdd\023\uffdd\024\uffdd\025" +
    "\uffdd\026\uffdd\027\uffdd\030\uffdd\031\uffdd\032\uffdd\033\uffdd" +
    "\034\uffdd\035\uffdd\036\uffdd\037\uffdd\040\uffdd\041\uffdd\042" +
    "\uffdd\043\uffdd\044\uffdd\045\uffdd\046\uffdd\047\uffdd\050\uffdd" +
    "\051\uffdd\001\002\000\016\002\ufffd\004\ufffd\005\ufffd\010" +
    "\ufffd\014\ufffd\016\ufffd\001\002\000\006\012\047\013\050" +
    "\001\002\000\004\021\153\001\002\000\006\012\047\013" +
    "\050\001\002\000\004\016\155\001\002\000\016\002\uffe9" +
    "\004\uffe9\005\uffe9\010\uffe9\014\uffe9\016\uffe9\001\002\000" +
    "\006\012\047\013\050\001\002\000\004\021\160\001\002" +
    "\000\006\012\047\013\050\001\002\000\004\016\162\001" +
    "\002\000\016\002\uffeb\004\uffeb\005\uffeb\010\uffeb\014\uffeb" +
    "\016\uffeb\001\002\000\006\012\047\013\050\001\002\000" +
    "\004\016\165\001\002\000\016\002\ufff7\004\ufff7\005\ufff7" +
    "\010\ufff7\014\ufff7\016\ufff7\001\002\000\006\012\047\013" +
    "\050\001\002\000\004\016\170\001\002\000\016\002\ufff2" +
    "\004\ufff2\005\ufff2\010\ufff2\014\ufff2\016\ufff2\001\002\000" +
    "\006\012\047\013\050\001\002\000\004\021\173\001\002" +
    "\000\006\012\047\013\050\001\002\000\004\021\175\001" +
    "\002\000\006\012\047\013\050\001\002\000\004\016\177" +
    "\001\002\000\016\002\uffe3\004\uffe3\005\uffe3\010\uffe3\014" +
    "\uffe3\016\uffe3\001\002\000\006\012\047\013\050\001\002" +
    "\000\004\021\202\001\002\000\006\012\047\013\050\001" +
    "\002\000\004\016\204\001\002\000\016\002\uffee\004\uffee" +
    "\005\uffee\010\uffee\014\uffee\016\uffee\001\002\000\004\002" +
    "\001\001\002\000\014\004\214\005\216\010\215\014\213" +
    "\016\217\001\002\000\004\011\210\001\002\000\006\012" +
    "\047\013\050\001\002\000\004\016\212\001\002\000\016" +
    "\002\uffe0\004\uffe0\005\uffe0\010\uffe0\014\uffe0\016\uffe0\001" +
    "\002\000\072\006\016\007\017\015\005\017\043\020\022" +
    "\023\025\024\033\025\013\026\027\027\024\030\036\031" +
    "\026\032\012\033\037\034\020\035\035\036\007\037\004" +
    "\040\042\041\014\042\040\043\015\044\032\045\041\046" +
    "\030\047\023\050\034\051\010\001\002\000\072\006\016" +
    "\007\017\015\005\017\043\020\022\023\025\024\033\025" +
    "\013\026\027\027\024\030\036\031\026\032\012\033\037" +
    "\034\020\035\035\036\007\037\004\040\042\041\014\042" +
    "\040\043\015\044\032\045\041\046\030\047\023\050\034" +
    "\051\010\001\002\000\072\006\016\007\017\015\005\017" +
    "\043\020\022\023\025\024\033\025\013\026\027\027\024" +
    "\030\036\031\026\032\012\033\037\034\020\035\035\036" +
    "\007\037\004\040\042\041\014\042\040\043\015\044\032" +
    "\045\041\046\030\047\023\050\034\051\010\001\002\000" +
    "\072\006\016\007\017\015\005\017\043\020\022\023\025" +
    "\024\033\025\013\026\027\027\024\030\036\031\026\032" +
    "\012\033\037\034\020\035\035\036\007\037\004\040\042" +
    "\041\014\042\040\043\015\044\032\045\041\046\030\047" +
    "\023\050\034\051\010\001\002\000\016\002\ufff8\004\ufff8" +
    "\005\ufff8\010\ufff8\014\ufff8\016\ufff8\001\002\000\004\016" +
    "\221\001\002\000\016\002\ufffe\004\ufffe\005\ufffe\010\ufffe" +
    "\014\ufffe\016\ufffe\001\002\000\004\016\223\001\002\000" +
    "\016\002\ufffc\004\ufffc\005\ufffc\010\ufffc\014\ufffc\016\ufffc" +
    "\001\002\000\004\016\225\001\002\000\016\002\uffff\004" +
    "\uffff\005\uffff\010\uffff\014\uffff\016\uffff\001\002\000\004" +
    "\016\227\001\002\000\016\002\ufffb\004\ufffb\005\ufffb\010" +
    "\ufffb\014\ufffb\016\ufffb\001\002\000\006\012\047\013\050" +
    "\001\002\000\004\021\232\001\002\000\006\012\047\013" +
    "\050\001\002\000\004\016\234\001\002\000\016\002\uffed" +
    "\004\uffed\005\uffed\010\uffed\014\uffed\016\uffed\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\232\000\012\003\010\004\030\005\020\006\005\001" +
    "\001\000\002\001\001\000\012\003\205\004\030\005\020" +
    "\007\206\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\003" +
    "\147\004\030\005\020\001\001\000\004\005\146\001\001" +
    "\000\002\001\001\000\010\003\142\004\030\005\020\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\007\045\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\007\051\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\007\054\001\001\000\002" +
    "\001\001\000\004\007\056\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\007\061\001\001\000\002\001\001" +
    "\000\004\007\063\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\007\066\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\007\071\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\007\074\001\001\000\002\001\001" +
    "\000\004\007\076\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\007\101\001\001\000\002\001\001\000\004" +
    "\007\103\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\007\110\001\001" +
    "\000\002\001\001\000\004\007\112\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\007\115\001\001\000\002" +
    "\001\001\000\004\007\117\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\007\122\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\007\125\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\007\132\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\007\135\001\001\000\002\001\001\000\004" +
    "\007\137\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\007\144\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\007\151\001\001\000\002\001\001" +
    "\000\004\007\153\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\007\156\001\001\000\002\001\001\000\004" +
    "\007\160\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\007\163\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\007\166\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\007\171\001\001\000\002\001\001\000\004" +
    "\007\173\001\001\000\002\001\001\000\004\007\175\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\007\200" +
    "\001\001\000\002\001\001\000\004\007\202\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\007\210\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\003\225\004\030" +
    "\005\020\001\001\000\010\003\223\004\030\005\020\001" +
    "\001\000\010\003\221\004\030\005\020\001\001\000\010" +
    "\003\217\004\030\005\020\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\007\230\001\001\000\002" +
    "\001\001\000\004\007\232\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  /*
  	La clase "CUP$parser$actions" es accesoria y está definida un poco más abajo. Pero es donde realmente se hace todo. 
	El parámetro "malla" ha sido añadido, porque es donde realmente hace falta.
  */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this,mimalla);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


				
	 public void syntax_error(java_cup.runtime.Symbol current) {			// La función "syntax_error" se llama siempre que 
	 		error_sintaxis = true;						//  hay un error de sintaxis. Se redefine aquí 
  		  report_error("\nparser_FIRST.java: Error de sintaxis", current);			//  para detectarla a través del valor "error_sintaxis"
  	}										//
	
	public void unrecovered_syntax_error(java_cup.runtime.Symbol current) { }	//Esta y la siguiente solo redefinidas. Mejor no
											// tocar más.
	public void report_fatal_error(String message, Object info){ }
		


}//class



/* ******************************************************************************************* */
/* ******************************************************************************************* */
/* ******************************************************************************************* */
/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser_FIRST parser;

  // * //
String cadena_final;			//La cadena que se va creando a partir de la del usuario pero con lo cuantis resueltos y los nombres
					// y variables sustituidas por coordenadas en la malla.
boolean evaluable = true;		//Si es evaluable o no. Esto debe de ser devuelto
int numeroElementos=0;
malla mimalla;
capturadorCuantificadores cc1;		

  /** Constructor */
  CUP$parser$actions(parser_FIRST parser, malla mimalla) {
    this.parser = parser;
    this.mimalla = mimalla;
    numeroElementos = mimalla.numElementos();
    cc1 = new capturadorCuantificadores();
  }

  public boolean _evaluable (){
  	return evaluable;
  }
  
  public String cadena_resuelta(){
  	return cadena_final;
  }	
  
  public boolean esNombre(char parametro){	// (a,b,c,d,e,f,g,h) son nombres
  	boolean vuelta;
  	if ((parametro =='a') || (parametro =='b') || (parametro =='c') || (parametro =='d') || (parametro =='e') || (parametro =='f') || (parametro =='g') || (parametro =='h') ) vuelta = true;
	else vuelta = false;
	return vuelta;
  }
  
   public boolean esVariable(char parametro){	// (x,y,z,t) son variables
  	boolean vuelta;
  	if ((parametro =='x') || (parametro =='y') || (parametro =='z') || (parametro =='t')  ) vuelta = true;
	else vuelta = false;
	return vuelta;
  }


  private void starter(char p2){	//comprueba la existencia y cuantificacion de nombres y variables en el "cc1"
  
  	if ( (p2=='x')||(p2=='y')||(p2=='z')||(p2=='t') ){	//comprobar cuantificado
		if (cc1.cuantificado(p2) == false){
			 evaluable = false;
			 //System.out.println ("La variable "+p2+" no está cuantificada");
		}
	}// if
	else if ( (p2=='a')||(p2=='b')||(p2=='c')||(p2=='d')||(p2=='e')||(p2=='f')||(p2=='g')||(p2=='h') ){//compr. existe
		if (mimalla.existeCasilla(p2) == false) {
			evaluable = false;
			//System.out.println ("El nombre "+p2+" no existe en la malla");
		}
	} //else if 
  }//starter

  private boolean caracter_en_cadena(String cadena, char caracter){	//ver si el caracter está en la cadena. Que chorrada...
  	boolean vuelta = false;
  	for (int i=0; i<cadena.length(); i++) {
		if (cadena.charAt(i) == caracter) vuelta = true;
	}
	return vuelta;
  }//caracter_en_cadena()

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // PARAMETRO ::= VARIABLE 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = (a.toString());
              CUP$parser$result = new java_cup.runtime.Symbol(5/*PARAMETRO*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // PARAMETRO ::= NOMBRE 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = (a.toString());
              CUP$parser$result = new java_cup.runtime.Symbol(5/*PARAMETRO*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // CUANTIFICADOR ::= NOT_C CUANTIFICADOR 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
				RESULT = (a.toString() + b.toString());
				cc1.negar(b.toString().charAt(b.toString().length()-1));
              CUP$parser$result = new java_cup.runtime.Symbol(3/*CUANTIFICADOR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // CUANTIFICADOR ::= CE VARIABLE 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 	RESULT = (a.toString() + b.toString());
			char var1 = b.toString().charAt(0);
			if (cc1.cuantificado(var1)) {
				evaluable = false;	
				//System.out.println("La variable "+var1+" está doblemente cuantificada");
			}
			else cc1.cuantificar(var1,2,0);
              CUP$parser$result = new java_cup.runtime.Symbol(3/*CUANTIFICADOR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // CUANTIFICADOR ::= CU VARIABLE 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 		RESULT = (a.toString() + b.toString());
				char var1 = b.toString().charAt(0);
				if (cc1.cuantificado(var1)) {
					evaluable = false;	
				//System.out.println(" La variable "+var1+" está doblemente cuantificada");	
				}
				else cc1.cuantificar(var1,1,0);
              CUP$parser$result = new java_cup.runtime.Symbol(3/*CUANTIFICADOR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // FUNC ::= P_I PARAMETRO EQUAL PARAMETRO P_D 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			 RESULT = (a.toString()+b.toString()+c.toString()+d.toString()+e.toString());
			
			starter(b.toString().charAt(0));	//Comprobar que los parámetros son correctos
			starter(d.toString().charAt(0));
			if (evaluable == true){			//seria falso si alguna de las dos anteriores falla
				if (esNombre(b.toString().charAt(0))){
					int x1 = mimalla.coordenadaX(b.toString().charAt(0));
					int y1 = mimalla.coordenadaY(b.toString().charAt(0));
					b = x1+","+y1;
				}//if
				if (esNombre(d.toString().charAt(0))){
					int x2 = mimalla.coordenadaX(d.toString().charAt(0));
					int y2 = mimalla.coordenadaY(d.toString().charAt(0));
					d = x2+","+y2;
				}//if
				RESULT = (a.toString()+b.toString()+c.toString()+d.toString()+e.toString());
			}//if
              CUP$parser$result = new java_cup.runtime.Symbol(2/*FUNC*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // FUNC ::= FALSE P_I P_D 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = (a.toString()+b.toString()+c.toString());
              CUP$parser$result = new java_cup.runtime.Symbol(2/*FUNC*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // FUNC ::= TAUTO P_I P_D 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = (a.toString()+b.toString()+c.toString());
              CUP$parser$result = new java_cup.runtime.Symbol(2/*FUNC*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // FUNC ::= ENTRE P_I PARAMETRO SEPARATOR PARAMETRO SEPARATOR PARAMETRO P_D 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object h = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT =(a.toString()+b.toString()+c.toString()+d.toString()+e.toString()+f.toString()+g.toString()+h.toString());
		
			starter(c.toString().charAt(0));
		 	starter(e.toString().charAt(0));
		 	starter(g.toString().charAt(0));
			if (evaluable == true){
				if (esNombre(c.toString().charAt(0))){
					int x1 = mimalla.coordenadaX(c.toString().charAt(0));
					int y1 = mimalla.coordenadaY(c.toString().charAt(0));
					c = x1+","+y1;
				}//if
				if (esNombre(e.toString().charAt(0))){
					int x2 = mimalla.coordenadaX(e.toString().charAt(0));
					int y2 = mimalla.coordenadaY(e.toString().charAt(0));
					e = x2+","+y2;
				}//if
				if (esNombre(g.toString().charAt(0))){
					int x3 = mimalla.coordenadaX(g.toString().charAt(0));
					int y3 = mimalla.coordenadaY(g.toString().charAt(0));
					g = x3+","+y3;
				}//if
				RESULT =(a.toString()+b.toString()+c.toString()+d.toString()+e.toString()+f.toString()+g.toString()+h.toString());
			}//if
              CUP$parser$result = new java_cup.runtime.Symbol(2/*FUNC*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // FUNC ::= ALREDEDOR P_I PARAMETRO SEPARATOR PARAMETRO P_D 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = (a.toString()+b.toString()+c.toString()+d.toString()+e.toString()+f.toString());
			
			starter(c.toString().charAt(0));
		 	starter(e.toString().charAt(0));
		 	if (evaluable == true){
				if (esNombre(c.toString().charAt(0))){
					int x1 = mimalla.coordenadaX(c.toString().charAt(0));
					int y1 = mimalla.coordenadaY(c.toString().charAt(0));
					c = x1+","+y1;
				}//if
				if (esNombre(e.toString().charAt(0))){
					int x2 = mimalla.coordenadaX(e.toString().charAt(0));
					int y2 = mimalla.coordenadaY(e.toString().charAt(0));
					e = x2+","+y2;
				}//if	
				RESULT =(a.toString()+b.toString()+c.toString()+d.toString()+e.toString()+f.toString());
			}//if
              CUP$parser$result = new java_cup.runtime.Symbol(2/*FUNC*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // FUNC ::= ABAJO P_I PARAMETRO SEPARATOR PARAMETRO P_D 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = (a.toString()+b.toString()+c.toString()+d.toString()+e.toString()+f.toString());
			
			starter(c.toString().charAt(0));
		 	starter(e.toString().charAt(0));
		 	if (evaluable == true){
				if (esNombre(c.toString().charAt(0))){
					int x1 = mimalla.coordenadaX(c.toString().charAt(0));
					int y1 = mimalla.coordenadaY(c.toString().charAt(0));
					c = x1+","+y1;
				}//if
				if (esNombre(e.toString().charAt(0))){
					int x2 = mimalla.coordenadaX(e.toString().charAt(0));
					int y2 = mimalla.coordenadaY(e.toString().charAt(0));
					e = x2+","+y2;
				}//if	
				RESULT =(a.toString()+b.toString()+c.toString()+d.toString()+e.toString()+f.toString());
			}//if
              CUP$parser$result = new java_cup.runtime.Symbol(2/*FUNC*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // FUNC ::= ARRIBA P_I PARAMETRO SEPARATOR PARAMETRO P_D 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = (a.toString()+b.toString()+c.toString()+d.toString()+e.toString()+f.toString());
	
			starter(c.toString().charAt(0));
		 	starter(e.toString().charAt(0));
		 	if (evaluable == true){
				if (esNombre(c.toString().charAt(0))){
					int x1 = mimalla.coordenadaX(c.toString().charAt(0));
					int y1 = mimalla.coordenadaY(c.toString().charAt(0));
					c = x1+","+y1;
				}//if
				if (esNombre(e.toString().charAt(0))){
					int x2 = mimalla.coordenadaX(e.toString().charAt(0));
					int y2 = mimalla.coordenadaY(e.toString().charAt(0));
					e = x2+","+y2;
				}//if	
				RESULT =(a.toString()+b.toString()+c.toString()+d.toString()+e.toString()+f.toString());
			}//if
              CUP$parser$result = new java_cup.runtime.Symbol(2/*FUNC*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // FUNC ::= DERECHA P_I PARAMETRO SEPARATOR PARAMETRO P_D 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = (a.toString()+b.toString()+c.toString()+d.toString()+e.toString()+f.toString());
			
			starter(c.toString().charAt(0));
		 	starter(e.toString().charAt(0));
		 	if (evaluable == true){
				if (esNombre(c.toString().charAt(0))){
					int x1 = mimalla.coordenadaX(c.toString().charAt(0));
					int y1 = mimalla.coordenadaY(c.toString().charAt(0));
					c = x1+","+y1;
				}//if
				if (esNombre(e.toString().charAt(0))){
					int x2 = mimalla.coordenadaX(e.toString().charAt(0));
					int y2 = mimalla.coordenadaY(e.toString().charAt(0));
					e = x2+","+y2;
				}//if	
				RESULT =(a.toString()+b.toString()+c.toString()+d.toString()+e.toString()+f.toString());
			}//if
              CUP$parser$result = new java_cup.runtime.Symbol(2/*FUNC*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // FUNC ::= IZQUIERDA P_I PARAMETRO SEPARATOR PARAMETRO P_D 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = (a.toString()+b.toString()+c.toString()+d.toString()+e.toString()+f.toString());
			
			starter(c.toString().charAt(0));
		 	starter(e.toString().charAt(0));
		 	if (evaluable == true){
				if (esNombre(c.toString().charAt(0))){
					int x1 = mimalla.coordenadaX(c.toString().charAt(0));
					int y1 = mimalla.coordenadaY(c.toString().charAt(0));
					c = x1+","+y1;
				}//if
				if (esNombre(e.toString().charAt(0))){
					int x2 = mimalla.coordenadaX(e.toString().charAt(0));
					int y2 = mimalla.coordenadaY(e.toString().charAt(0));
					e = x2+","+y2;
				}//if	
				RESULT =(a.toString()+b.toString()+c.toString()+d.toString()+e.toString()+f.toString());
			}//if
              CUP$parser$result = new java_cup.runtime.Symbol(2/*FUNC*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // FUNC ::= MISMACOLUMNA P_I PARAMETRO SEPARATOR PARAMETRO P_D 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = (a.toString()+b.toString()+c.toString()+d.toString()+e.toString()+f.toString());
			
			starter(c.toString().charAt(0));
		 	starter(e.toString().charAt(0));
		 	if (evaluable == true){
				if (esNombre(c.toString().charAt(0))){
					int x1 = mimalla.coordenadaX(c.toString().charAt(0));
					int y1 = mimalla.coordenadaY(c.toString().charAt(0));
					c = x1+","+y1;
				}//if
				if (esNombre(e.toString().charAt(0))){
					int x2 = mimalla.coordenadaX(e.toString().charAt(0));
					int y2 = mimalla.coordenadaY(e.toString().charAt(0));
					e = x2+","+y2;
				}//if	
				RESULT =(a.toString()+b.toString()+c.toString()+d.toString()+e.toString()+f.toString());
			}//if
              CUP$parser$result = new java_cup.runtime.Symbol(2/*FUNC*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // FUNC ::= MISMAFILA P_I PARAMETRO SEPARATOR PARAMETRO P_D 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = (a.toString()+b.toString()+c.toString()+d.toString()+e.toString()+f.toString());
			
			starter(c.toString().charAt(0));
		 	starter(e.toString().charAt(0));
		 	if (evaluable == true){
				if (esNombre(c.toString().charAt(0))){
					int x1 = mimalla.coordenadaX(c.toString().charAt(0));
					int y1 = mimalla.coordenadaY(c.toString().charAt(0));
					c = x1+","+y1;
				}//if
				if (esNombre(e.toString().charAt(0))){
					int x2 = mimalla.coordenadaX(e.toString().charAt(0));
					int y2 = mimalla.coordenadaY(e.toString().charAt(0));
					e = x2+","+y2;
				}//if	
				RESULT =(a.toString()+b.toString()+c.toString()+d.toString()+e.toString()+f.toString());
			}//if
              CUP$parser$result = new java_cup.runtime.Symbol(2/*FUNC*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // FUNC ::= MISMOTAMANHO P_I PARAMETRO SEPARATOR PARAMETRO P_D 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = (a.toString()+b.toString()+c.toString()+d.toString()+e.toString()+f.toString());
			
			starter(c.toString().charAt(0));
		 	starter(e.toString().charAt(0));
		 	if (evaluable == true){
				if (esNombre(c.toString().charAt(0))){
					int x1 = mimalla.coordenadaX(c.toString().charAt(0));
					int y1 = mimalla.coordenadaY(c.toString().charAt(0));
					c = x1+","+y1;
				}//if
				if (esNombre(e.toString().charAt(0))){
					int x2 = mimalla.coordenadaX(e.toString().charAt(0));
					int y2 = mimalla.coordenadaY(e.toString().charAt(0));
					e = x2+","+y2;
				}//if	
				RESULT =(a.toString()+b.toString()+c.toString()+d.toString()+e.toString()+f.toString());
			}//if
              CUP$parser$result = new java_cup.runtime.Symbol(2/*FUNC*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // FUNC ::= MISMOCOLOR P_I PARAMETRO SEPARATOR PARAMETRO P_D 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = (a.toString()+b.toString()+c.toString()+d.toString()+e.toString()+f.toString());
			
			starter(c.toString().charAt(0));
		 	starter(e.toString().charAt(0));
		 	if (evaluable == true){
				if (esNombre(c.toString().charAt(0))){
					int x1 = mimalla.coordenadaX(c.toString().charAt(0));
					int y1 = mimalla.coordenadaY(c.toString().charAt(0));
					c = x1+","+y1;
				}//if
				if (esNombre(e.toString().charAt(0))){
					int x2 = mimalla.coordenadaX(e.toString().charAt(0));
					int y2 = mimalla.coordenadaY(e.toString().charAt(0));
					e = x2+","+y2;
				}//if	
				RESULT =(a.toString()+b.toString()+c.toString()+d.toString()+e.toString()+f.toString());
			}//if
              CUP$parser$result = new java_cup.runtime.Symbol(2/*FUNC*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // FUNC ::= MISMAFORMA P_I PARAMETRO SEPARATOR PARAMETRO P_D 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = (a.toString()+b.toString()+c.toString()+d.toString()+e.toString()+f.toString());
			
			starter(c.toString().charAt(0));
		 	starter(e.toString().charAt(0));
		 	if (evaluable == true){
				if (esNombre(c.toString().charAt(0))){
					int x1 = mimalla.coordenadaX(c.toString().charAt(0));
					int y1 = mimalla.coordenadaY(c.toString().charAt(0));
					c = x1+","+y1;
				}//if
				if (esNombre(e.toString().charAt(0))){
					int x2 = mimalla.coordenadaX(e.toString().charAt(0));
					int y2 = mimalla.coordenadaY(e.toString().charAt(0));
					e = x2+","+y2;
				}//if	
				RESULT =(a.toString()+b.toString()+c.toString()+d.toString()+e.toString()+f.toString());
			}//if
              CUP$parser$result = new java_cup.runtime.Symbol(2/*FUNC*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // FUNC ::= MASPEQUENHO P_I PARAMETRO SEPARATOR PARAMETRO P_D 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = (a.toString()+b.toString()+c.toString()+d.toString()+e.toString()+f.toString());
			
			starter(c.toString().charAt(0));
		 	starter(e.toString().charAt(0));
		 	if (evaluable == true){
				if (esNombre(c.toString().charAt(0))){
					int x1 = mimalla.coordenadaX(c.toString().charAt(0));
					int y1 = mimalla.coordenadaY(c.toString().charAt(0));
					c = x1+","+y1;
				}//if
				if (esNombre(e.toString().charAt(0))){
					int x2 = mimalla.coordenadaX(e.toString().charAt(0));
					int y2 = mimalla.coordenadaY(e.toString().charAt(0));
					e = x2+","+y2;
				}//if	
				RESULT =(a.toString()+b.toString()+c.toString()+d.toString()+e.toString()+f.toString());
			}//if
              CUP$parser$result = new java_cup.runtime.Symbol(2/*FUNC*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // FUNC ::= MASGRANDE P_I PARAMETRO SEPARATOR PARAMETRO P_D 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = (a.toString()+b.toString()+c.toString()+d.toString()+e.toString()+f.toString());
			
			starter(c.toString().charAt(0));
		 	starter(e.toString().charAt(0));
		 	if (evaluable == true){
				if (esNombre(c.toString().charAt(0))){
					int x1 = mimalla.coordenadaX(c.toString().charAt(0));
					int y1 = mimalla.coordenadaY(c.toString().charAt(0));
					c = x1+","+y1;
				}//if
				if (esNombre(e.toString().charAt(0))){
					int x2 = mimalla.coordenadaX(e.toString().charAt(0));
					int y2 = mimalla.coordenadaY(e.toString().charAt(0));
					e = x2+","+y2;
				}//if	
				RESULT =(a.toString()+b.toString()+c.toString()+d.toString()+e.toString()+f.toString());
			}//if
              CUP$parser$result = new java_cup.runtime.Symbol(2/*FUNC*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // FUNC ::= PIRAMIDE P_I PARAMETRO P_D 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = (a.toString()+b.toString()+c.toString()+d.toString());
			starter(c.toString().charAt(0));
			if ( (evaluable == true) && (esNombre(c.toString().charAt(0))) ) {
				int x1 = mimalla.coordenadaX(c.toString().charAt(0));
				int y1 = mimalla.coordenadaY(c.toString().charAt(0));
				RESULT = (a.toString()+b.toString()+x1+","+y1+d.toString());
			}
              CUP$parser$result = new java_cup.runtime.Symbol(2/*FUNC*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // FUNC ::= CUBO P_I PARAMETRO P_D 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = (a.toString()+b.toString()+c.toString()+d.toString());
			starter(c.toString().charAt(0));
			if ( (evaluable == true) && (esNombre(c.toString().charAt(0))) ) {
				int x1 = mimalla.coordenadaX(c.toString().charAt(0));
				int y1 = mimalla.coordenadaY(c.toString().charAt(0));
				RESULT = (a.toString()+b.toString()+x1+","+y1+d.toString());
			}
              CUP$parser$result = new java_cup.runtime.Symbol(2/*FUNC*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // FUNC ::= ESFERA P_I PARAMETRO P_D 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = (a.toString()+b.toString()+c.toString()+d.toString());
			starter(c.toString().charAt(0));
			if ( (evaluable == true) && (esNombre(c.toString().charAt(0))) ) {
				int x1 = mimalla.coordenadaX(c.toString().charAt(0));
				int y1 = mimalla.coordenadaY(c.toString().charAt(0));
				RESULT = (a.toString()+b.toString()+x1+","+y1+d.toString());
			}
              CUP$parser$result = new java_cup.runtime.Symbol(2/*FUNC*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // FUNC ::= AMARILLO P_I PARAMETRO P_D 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = (a.toString()+b.toString()+c.toString()+d.toString());
			starter(c.toString().charAt(0));
			if ( (evaluable == true) && (esNombre(c.toString().charAt(0))) ) {
				int x1 = mimalla.coordenadaX(c.toString().charAt(0));
				int y1 = mimalla.coordenadaY(c.toString().charAt(0));
				RESULT = (a.toString()+b.toString()+x1+","+y1+d.toString());
			}
              CUP$parser$result = new java_cup.runtime.Symbol(2/*FUNC*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // FUNC ::= AZUL P_I PARAMETRO P_D 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = (a.toString()+b.toString()+c.toString()+d.toString());
			starter(c.toString().charAt(0));
			if ( (evaluable == true) && (esNombre(c.toString().charAt(0))) ) {
				int x1 = mimalla.coordenadaX(c.toString().charAt(0));
				int y1 = mimalla.coordenadaY(c.toString().charAt(0));
				RESULT = (a.toString()+b.toString()+x1+","+y1+d.toString());
			}
              CUP$parser$result = new java_cup.runtime.Symbol(2/*FUNC*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // FUNC ::= ROJO P_I PARAMETRO P_D 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = (a.toString()+b.toString()+c.toString()+d.toString());
			starter(c.toString().charAt(0));
			if ( (evaluable == true) && (esNombre(c.toString().charAt(0))) ) {
				int x1 = mimalla.coordenadaX(c.toString().charAt(0));
				int y1 = mimalla.coordenadaY(c.toString().charAt(0));
				RESULT = (a.toString()+b.toString()+x1+","+y1+d.toString());
			}
              CUP$parser$result = new java_cup.runtime.Symbol(2/*FUNC*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // FUNC ::= PEQUENHO P_I PARAMETRO P_D 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = (a.toString()+b.toString()+c.toString()+d.toString());
			starter(c.toString().charAt(0));
			if ( (evaluable == true) && (esNombre(c.toString().charAt(0))) ) {
				int x1 = mimalla.coordenadaX(c.toString().charAt(0));
				int y1 = mimalla.coordenadaY(c.toString().charAt(0));
				RESULT = (a.toString()+b.toString()+x1+","+y1+d.toString());
			}
              CUP$parser$result = new java_cup.runtime.Symbol(2/*FUNC*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // FUNC ::= GRANDE P_I PARAMETRO P_D 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = (a.toString()+b.toString()+c.toString()+d.toString());
			starter(c.toString().charAt(0));
			if ( (evaluable == true) && (esNombre(c.toString().charAt(0))) ) {
				int x1 = mimalla.coordenadaX(c.toString().charAt(0));
				int y1 = mimalla.coordenadaY(c.toString().charAt(0));
				RESULT = (a.toString()+b.toString()+x1+","+y1+d.toString());
			}
              CUP$parser$result = new java_cup.runtime.Symbol(2/*FUNC*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // expr ::= P_I expr P_D 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT = (a.toString()+b.toString()+c.toString());
		
              CUP$parser$result = new java_cup.runtime.Symbol(1/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // expr ::= FUNC 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT = a.toString();
		
              CUP$parser$result = new java_cup.runtime.Symbol(1/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // expr ::= CUANTIFICADOR expr 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			
			char var1 = a.toString().charAt(a.toString().length()-1);	//variable que se cuantifica
			String cadena_a_resolver = ( b.toString() );
			if (caracter_en_cadena(cadena_a_resolver,var1) == false) {	//cuantificacion vacua
					/*
						Una cuantificación vacua es algo como esto:
							PARATODO(x)PARATODO(y) FUNCION(y,y)
						La 'x' se cuantifica pero luego no se usa. Como no nos aporta información pues se 
						 saca de la cadena final y listo.
					*/
				RESULT = b.toString();
				//System.out.println("Hay cuantificación vacua en "+var1);
			}
			else{
				String fin = "(";
				int _cuantificacion = cc1.devolverCuantificacion(var1); //vemos si la variable está cuantificada
				boolean _negado = cc1.negado(var1);			// y si está negada en su cuantificación
				int[][] elementos = mimalla.devolverElementos();		//pares de coordenadas de los elementos de la malla
				
				if ( (_cuantificacion ==1) && (_negado == false) ){ //PARATODOx F(x)
					for (int i=0; i<numeroElementos; i++){	//sustituir la 'x' por cada elemento (coordenadas)
						int x1 = elementos[i][0];	
						int y1 = elementos[i][1];
						String subcadena = x1+","+y1;
						String temp ="@";
						if (var1=='x') temp = cadena_a_resolver.replaceAll("x",subcadena);
						else if (var1=='y') temp = cadena_a_resolver.replaceAll("y",subcadena);
						else if (var1=='z') temp = cadena_a_resolver.replaceAll("z",subcadena);
						else if (var1=='t') temp = cadena_a_resolver.replaceAll("t",subcadena);
						fin = fin+"("+temp+")";
							/*
								PARATODOx F(x) = F(1)^F(2)^F(3)^F(4)^......	
							*/
						if (i< numeroElementos-1) fin = fin+"^";
					}//for
				}//if
				else if ( (_cuantificacion ==1) && (_negado == true) ){ //NO_PARATODOx F(x)
					for (int i=0; i<numeroElementos; i++){
						int x1 = elementos[i][0];
						int y1 = elementos[i][1];
						String subcadena = x1+","+y1;
						String temp ="@";
						if (var1=='x') temp = cadena_a_resolver.replaceAll("x",subcadena);
						else if (var1=='y') temp = cadena_a_resolver.replaceAll("y",subcadena);
						else if (var1=='z') temp = cadena_a_resolver.replaceAll("z",subcadena);
						else if (var1=='t') temp = cadena_a_resolver.replaceAll("t",subcadena);
						fin = fin+"(¬("+temp+"))";
							/*
								¬ PARATODOx F(x) = ¬F(1)v ¬F(2)v ¬F(3)v ¬F(4)v......	
							*/
						if (i< numeroElementos-1) fin = fin+"v";
					}//for
				}//if
				else if ( (_cuantificacion ==2) && (_negado == false) ){ //EXISTEx F(x)
					for (int i=0; i<numeroElementos; i++){
						int x1 = elementos[i][0];
						int y1 = elementos[i][1];
						String subcadena = x1+","+y1;
						String temp ="@";
						if (var1=='x') temp = cadena_a_resolver.replaceAll("x",subcadena);
						else if (var1=='y') temp = cadena_a_resolver.replaceAll("y",subcadena);
						else if (var1=='z') temp = cadena_a_resolver.replaceAll("z",subcadena);
						else if (var1=='t') temp = cadena_a_resolver.replaceAll("t",subcadena);
						fin = fin+"("+temp+")";
							/*
								EXISTEx F(x) = F(1) v F(2) v F(3) v F(4) v......	
							*/
						if (i< numeroElementos-1) fin = fin+"v";
					}//for
				}//if
				else if ( (_cuantificacion ==2) && (_negado == true) ){ //NO_EXISTEx F(x)
					for (int i=0; i<numeroElementos; i++){
						int x1 = elementos[i][0];
						int y1 = elementos[i][1];
						String subcadena = x1+","+y1;
						String temp ="@";
						if (var1=='x') temp = cadena_a_resolver.replaceAll("x",subcadena);
						else if (var1=='y') temp = cadena_a_resolver.replaceAll("y",subcadena);
						else if (var1=='z') temp = cadena_a_resolver.replaceAll("z",subcadena);
						else if (var1=='t') temp = cadena_a_resolver.replaceAll("t",subcadena);
						fin = fin+"(¬("+temp+"))";
							/*
								¬EXISTEx F(x) = ¬F(1) v ¬F(2) v ¬F(3) v ¬F(4) v......	
							*/
						if (i< numeroElementos-1) fin = fin+"^";
					}//for
				}//if
				
				
				fin = fin+")";
				RESULT = fin;
				cc1.reiniciar(var1);	//Para delimitar hasta donde se extiende un cuantificador
			
			}//else
		
              CUP$parser$result = new java_cup.runtime.Symbol(1/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // expr ::= P_I expr BIMPLICA expr P_D 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT = (a.toString()+b.toString()+c.toString()+d.toString()+e.toString());
		
              CUP$parser$result = new java_cup.runtime.Symbol(1/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // expr ::= P_I expr IMPLICA expr P_D 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT = (a.toString()+b.toString()+c.toString()+d.toString()+e.toString());
		
              CUP$parser$result = new java_cup.runtime.Symbol(1/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // expr ::= NOT expr 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT = (a.toString()+b.toString());
		
              CUP$parser$result = new java_cup.runtime.Symbol(1/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // expr ::= P_I expr OR expr P_D 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT = (a.toString()+b.toString()+c.toString()+d.toString()+e.toString());
		
              CUP$parser$result = new java_cup.runtime.Symbol(1/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // expr ::= P_I expr AND expr P_D 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			RESULT = (a.toString()+b.toString()+c.toString()+d.toString()+e.toString());
		
              CUP$parser$result = new java_cup.runtime.Symbol(1/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // FORMULA ::= expr 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			//System.out.println("\n>> "+a);
						RESULT = (a.toString());
						cadena_final = (a.toString());
					
              CUP$parser$result = new java_cup.runtime.Symbol(4/*FORMULA*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= FORMULA EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

